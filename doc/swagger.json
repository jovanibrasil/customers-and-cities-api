{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample documentation for a Compasso UOL challange.",
    "version": "1.0.0",
    "title": "Customers and cities API",
    "contact": {
      "email": "jovani.brasil@compasso.com.br"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:3000",
  "tags": [
    {
      "name": "Customer",
      "description": "Is an person that is your client"
    },
    {
      "name": "City",
      "description": "Location where customers live"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/cities": {
      "post": {
        "tags": [
          "City"
        ],
        "summary": "Create a new city",
        "description": "",
        "operationId": "createCity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "City object that needs to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/City"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "City"
        ],
        "summary": "Finds cities by parameters",
        "description": "",
        "operationId": "findCitiesByParameters",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name: Ex.: Porto Alegre",
            "required": false,
            "type": "string"
          },
          {
            "name": "state",
            "in": "query",
            "description": "Filter by state: Ex.: Rio Grande do Sul",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Is the quantity of elements that must be returned",
            "required": false,
            "type": "number"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Is the page that must be returned",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/City"
              }
            }
          }
        }
      }
    },
    "/customers": {
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create a new customer",
        "description": "",
        "operationId": "createCustomer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Customer object that needs to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Finds customers by parameters",
        "description": "",
        "operationId": "findCustomersByParameters",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name: Ex.: Jovani",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Is the quantity of elements that must be returned",
            "required": false,
            "type": "number"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Is the page that must be returned",
            "required": false,
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Customer"
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Find customer by ID",
        "description": "Returns a single customer",
        "operationId": "getCustomerById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "ID of customer to return",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Customer"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Customer"
        ],
        "summary": "Deletes a customer",
        "description": "",
        "operationId": "deleteCustomer",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "ID of customer to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {
            "description": "Customer deleted"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      }
    },
    "/customers/{customer_id}/name": {
      "patch": {
        "tags": [
          "Customer"
        ],
        "summary": "Updates a customer's name",
        "description": "",
        "operationId": "updateCustomerName",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "ID of customer to delete",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Customer object that needs to have name updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerNameUpdate"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid input"
          }
        }
      }
    }
  },
  "definitions": {
    "Customer": {
      "type": "object",
      "required": [
        "name",
        "genre",
        "birth_date",
        "city_id"
      ],
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 80
        },
        "genre": {
          "type": "string",
          "enum": [
            "M",
            "F"
          ]
        },
        "birth_date": {
          "type": "string",
          "format": "date-time"
        },
        "city_id": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "CustomerNameUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 80
        }
      }
    },
    "City": {
      "type": "object",
      "required": [
        "name",
        "state"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Porto Alegre"
        },
        "state": {
          "type": "string",
          "example": "Rio Grande do Sul"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}